Описание проекта:

Разработать WEB-приложение, которое поддерживает заданную функциональность. Требования к
реализации следующие:
1. На основе сущностей предметной области создать классы которые им соответствуют
2. Классы и методы должны иметь названия, которые отражают их функциональность, и должны
быть грамотно разнесены по пакетам
3. Оформление кода должно соответствовать Java Code Convention
4. Информацию о предметной области хранить в базе данных (в качестве СУБД рекомендуется
использовать Maria DB)
5. Для доступа к данным использовать API JDBC с использованием пула соединений (не
допускается использование ORM фреймворков)
6. Приложение должно поддерживать работу с кириллицей (быть многоязычным), в том числе при
хранении информации в базе данных:
- должна быть возможность переключения языка интерфейса;
- должна быть поддержка ввода, вывода и хранения информации (в базе данных), записанной
на разных языках (см. ниже);
- в качестве поддерживаемых языков выбрать минимум два: один на основе кириллицы,
другой на основе латиницы.
7. Архитектура приложения должна соответствовать шаблону MVC (не допускается
использование MVC фреймверков)
8. При реализации алгоритмов бизнес-логики использовать шаблоны
9. Используя сервлеты и JSP, реализовать функциональность, приведенную в постановке задачи
10. В качестве контейнера сервлетов использовать Apache Tomcat
11. На страницах JSP применять теги из библиотеки JSTL и разработанные собственные теги
(минимум один custom tag library тег и минимум один tag file тег)
12. При разработке использовать сессии, фильтры, слушатели
13. Использовать журналирование событий с использованием библиотеки Apache Log4j или Slf4J
14. Самостоятельное расширение постановки задачи по функциональности приветствуется

Дополнительно, к требованиям изложенным выше, более чем желательно обеспечить выполнение
следующих требований.
1. Реализовать разграничение прав доступа пользователей системы к компонентам приложения
2. Реализовать защиту от повторной отправки данных на сервер при обновлении страницы
3. Все поля ввода должны быть с валидацией данных

Тестирование

Студент регистрируется в системе и после регистрации может пройти один или несколько тестов. В
системе существует перечень тестов, разделенных по предметам.
Для перечня необходимо реализовать:
- выборку тестов по определенному предмету;
- сортировку тестов по названию;
- сортировку тестов по сложности;
- сортировку тестов по количеству вопросов.
Студент выбирает тест и проходит его. На прохождение теста выделяется определенный
промежуток времени, которой устанавливается для каждого теста отдельно. Студент имеет личный
кабинет, в котором отображена регистрационная информация, а также список пройденных тестов с
результатами.
Администратор системы:
- создает, удаляет или редактирует тесты;
- блокирует, разблокирует пользователя.
При создании теста администратор:
- устанавливает время прохождения теста;
- сложность теста;
- добавляет вопросы в тест (вопрос может иметь один или несколько правильных ответов)
Результат прохождения теста представляет собой процент вопросов, на которые правильно ответил
студент по отношению к общему числу вопросов (считается, что студент правильно ответил на
вопрос, если его ответ на него совпадает в точности с правильными вариантами ответов).
